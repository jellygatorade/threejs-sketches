//

// // geometry - using the GOL array to specify how many divisions
// const geometry = new THREE.CylinderGeometry(15, 15, 1, intialGOL.length, 1);

// Following
// https://dustinpfister.github.io/2018/05/14/threejs-mesh-material-index/
// https://stackoverflow.com/questions/41540313/three-buffergeometry-accessing-face-indices-and-face-normals/41540720#41540720
// https://stackoverflow.com/questions/68934851/three-js-assign-array-of-materials-to-an-indexed-buffergeometry

// To change material per face in a BufferGeometry
// Faces must be selected by group

// For BufferGeometries in general (I think)
// geometry.index.array holds 3x the total amount of triangular faces, because it holds each vertex for each face
// geometry.index.array.length will 3x the total amount of triangular faces

// For CylinderGeometry specifically
// geometry.groups default 0th group always contains half of the total number of geometry.index.array.length
// I want
// start: 0, count: 3, materialIndex: 0
// start: 3, count: 3, materialIndex: 1
// start: 6, count: 3, materialIndex: 0
// ...until
// start: 0.5 * geometry.index.array.length ... and from there keep the two default groups representing the ends of the cylinder

// const defaultGroups = geometry.groups; // store the default groups that come with CylinderGeometry
// geometry.clearGroups(); // clear the default groups

// // The loop below accomplishes something like this...
// // geometry.addGroup(0, 6, 0);
// // geometry.addGroup(6, 6, 1);
// // geometry.addGroup(12, 6, 2);
// // geometry.addGroup(18, 6, 3);
// // ...

// let iterations = 0; // used to make each materialIndex unique (0, 1, 2, 3...)
// for (let i = 0; i < 0.5 * geometry.index.array.length; i += 6) {
//   //console.log(i, matIndex);
//   geometry.addGroup(i, 6, iterations);
//   iterations++;
// }

// Add the default groups back
// geometry.addGroup(
//   defaultGroups[1].start,
//   defaultGroups[1].count,
//   defaultGroups[1].materialIndex
// );
// geometry.addGroup(
//   defaultGroups[2].start,
//   defaultGroups[2].count,
//   defaultGroups[2].materialIndex
// );

//const object = new THREE.Mesh(geometry, alternateFacesMaterials);
//const object = new THREE.Mesh(geometry, mapGOLToMaterials(intialGOL));
//console.log(object);

//scene.add(object);

// // Show edges
// //const edges = new THREE.WireframeGeometry(geometry);
// const edges = new THREE.EdgesGeometry(geometry);
// const line = new THREE.LineSegments(
//   edges,
//   new THREE.LineBasicMaterial({ color: 0xffffff })
// );
// scene.add(line);

//